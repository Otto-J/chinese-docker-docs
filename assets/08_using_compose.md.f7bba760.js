import{_ as s,c as a,o as n,N as e}from"./chunks/framework.dc3ff5a3.js";const o="/chinese-docker-docs/assets/dashboard-app-project-collapsed.fa0f8d05.png",l="/chinese-docker-docs/assets/dashboard-app-project-expanded.d4dd17c8.png",m=JSON.parse('{"title":"Use Docker Compose","description":"Making our lives easier with Compose for our application","frontmatter":{"title":"Use Docker Compose","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop","description":"Making our lives easier with Compose for our application"},"headers":[],"relativePath":"08_using_compose.md"}'),p={name:"08_using_compose.md"},t=e(`<p><a href="./../compose/">Docker Compose</a> is a tool that was developed to help define and share multi-container applications. With Compose, we can create a YAML file to define the services and with a single command, can spin everything up or tear it all down.</p><p>The <em>big</em> advantage of using Compose is you can define your application stack in a file, keep it at the root of your project repo (it&#39;s now version controlled), and easily enable someone else to contribute to your project. Someone would only need to clone your repo and start the compose app. In fact, you might see quite a few projects on GitHub/GitLab doing exactly this now.</p><p>So, how do we get started?</p><h2 id="install-docker-compose" tabindex="-1">Install Docker Compose <a class="header-anchor" href="#install-docker-compose" aria-label="Permalink to &quot;Install Docker Compose&quot;">​</a></h2><p>If you installed Docker Desktop/Toolbox for either Windows or Mac, you already have Docker Compose! Play-with-Docker instances already have Docker Compose installed as well. If you are on a Linux machine, you will need to <a href="./../compose/install/">install Docker Compose</a>.</p><p>After installation, you should be able to run the following and see version information.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">version</span></span>
<span class="line"></span></code></pre></div><h2 id="create-the-compose-file" tabindex="-1">Create the Compose file <a class="header-anchor" href="#create-the-compose-file" aria-label="Permalink to &quot;Create the Compose file&quot;">​</a></h2><ol><li><p>At the root of the app project, create a file named <code>docker-compose.yml</code>.</p></li><li><p>In the compose file, we&#39;ll start off by defining the list of services (or containers) we want to run as part of our application.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div></li></ol><p>And now, we&#39;ll start migrating a service at a time into the compose file.</p><h2 id="define-the-app-service" tabindex="-1">Define the app service <a class="header-anchor" href="#define-the-app-service" aria-label="Permalink to &quot;Define the app service&quot;">​</a></h2><p>To remember, this was the command we were using to define our app container.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:/app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_HOST=mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_USER=root</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_PASSWORD=secret</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_DB=todos</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">node:</span><span style="color:#F78C6C;">18</span><span style="color:#C3E88D;">-alpine</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn install &amp;&amp; yarn run dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ol><li><p>First, let&#39;s define the service entry and the image for the container. We can pick any name for the service. The name will automatically become a network alias, which will be useful when defining our MySQL service.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"></span></code></pre></div></li><li><p>Typically, you will see the <code>command</code> close to the <code>image</code> definition, although there is no requirement on ordering. So, let&#39;s go ahead and move that into our file.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p>Let&#39;s migrate the <code>-p 3000:3000</code> part of the command by defining the <code>ports</code> for the service. We will use the <a href="./../compose/compose-file/compose-file-v3.html#short-syntax-1">short syntax</a> here, but there is also a more verbose <a href="./../compose/compose-file/compose-file-v3.html#long-syntax-1">long syntax</a> available as well.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">3000:3000</span></span>
<span class="line"></span></code></pre></div></li><li><p>Next, we&#39;ll migrate both the working directory (<code>-w /app</code>) and the volume mapping (<code>-v &quot;$(pwd):/app&quot;</code>) by using the <code>working_dir</code> and <code>volumes</code> definitions. Volumes also has a <a href="./../compose/compose-file/compose-file-v3.html#short-syntax-3">short</a> and <a href="./../compose/compose-file/compose-file-v3.html#long-syntax-3">long</a> syntax.</p><p>One advantage of Docker Compose volume definitions is we can use relative paths from the current directory.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">3000:3000</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">working_dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./:/app</span></span>
<span class="line"></span></code></pre></div></li><li><p>Finally, we need to migrate the environment variable definitions using the <code>environment</code> key.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">3000:3000</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">working_dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./:/app</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_HOST</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_USER</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">secret</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_DB</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todos</span></span>
<span class="line"></span></code></pre></div></li></ol><h3 id="define-the-mysql-service" tabindex="-1">Define the MySQL service <a class="header-anchor" href="#define-the-mysql-service" aria-label="Permalink to &quot;Define the MySQL service&quot;">​</a></h3><p>Now, it&#39;s time to define the MySQL service. The command that we used for that container was the following:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--network-alias</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-mysql-data:/var/lib/mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_ROOT_PASSWORD=secret</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_DATABASE=todos</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">mysql:</span><span style="color:#F78C6C;">8.0</span></span>
<span class="line"></span></code></pre></div><ol><li><p>We will first define the new service and name it <code>mysql</code> so it automatically gets the network alias. We&#39;ll go ahead and specify the image to use as well.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># The app service definition</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mysql</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql:8.0</span></span>
<span class="line"></span></code></pre></div></li><li><p>Next, we&#39;ll define the volume mapping. When we ran the container with <code>docker run</code>, the named volume was created automatically. However, that doesn&#39;t happen when running with Compose. We need to define the volume in the top-level <code>volumes:</code> section and then specify the mountpoint in the service config. By simply providing only the volume name, the default options are used. There are <a href="./../compose/compose-file/compose-file-v3.html#volume-configuration-reference">many more options available</a> though.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># The app service definition</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mysql</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql:8.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-mysql-data:/var/lib/mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">todo-mysql-data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div></li><li><p>Finally, we only need to specify the environment variables.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># The app service definition</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mysql</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql:8.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-mysql-data:/var/lib/mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_ROOT_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">secret</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_DATABASE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todos</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">todo-mysql-data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div></li></ol><p>At this point, our complete <code>docker-compose.yml</code> should look like this:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">command</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">3000:3000</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">working_dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./:/app</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_HOST</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_USER</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">secret</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_DB</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todos</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mysql</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql:8.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-mysql-data:/var/lib/mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_ROOT_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">secret</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MYSQL_DATABASE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todos</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">todo-mysql-data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div><h2 id="run-the-application-stack" tabindex="-1">Run the application stack <a class="header-anchor" href="#run-the-application-stack" aria-label="Permalink to &quot;Run the application stack&quot;">​</a></h2><p>Now that we have our <code>docker-compose.yml</code> file, we can start it up!</p><ol><li><p>Make sure no other copies of the app/db are running first (<code>docker ps</code> and <code>docker rm -f &lt;ids&gt;</code>).</p></li><li><p>Start up the application stack using the <code>docker compose up</code> command. We&#39;ll add the <code>-d</code> flag to run everything in the background.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>
<span class="line"></span></code></pre></div><p>When we run this, we should see output like this:</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Creating network &quot;app_default&quot; with the default driver</span></span>
<span class="line"><span style="color:#A6ACCD;">Creating volume &quot;app_todo-mysql-data&quot; with default driver</span></span>
<span class="line"><span style="color:#A6ACCD;">Creating app_app_1   ... done</span></span>
<span class="line"><span style="color:#A6ACCD;">Creating app_mysql_1 ... done</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>You&#39;ll notice that the volume was created as well as a network! By default, Docker Compose automatically creates a network specifically for the application stack (which is why we didn&#39;t define one in the compose file).</p></li><li><p>Let&#39;s look at the logs using the <code>docker compose logs -f</code> command. You&#39;ll see the logs from each of the services interleaved into a single stream. This is incredibly useful when you want to watch for timing-related issues. The <code>-f</code> flag &quot;follows&quot; the log, so will give you live output as it&#39;s generated.</p><p>If you have run the command already, you&#39;ll see output that looks like this:</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">mysql_1  | 2019-10-03T03:07:16.083639Z 0 [Note] mysqld: ready for connections.</span></span>
<span class="line"><span style="color:#A6ACCD;">mysql_1  | Version: &#39;8.0.31&#39;  socket: &#39;/var/run/mysqld/mysqld.sock&#39;  port: 3306  MySQL Community Server (GPL)</span></span>
<span class="line"><span style="color:#A6ACCD;">app_1    | Connected to mysql db at host mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">app_1    | Listening on port 3000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The service name is displayed at the beginning of the line (often colored) to help distinguish messages. If you want to view the logs for a specific service, you can add the service name to the end of the logs command (for example, <code>docker compose logs -f app</code>).</p><blockquote><p><strong>Tip: Waiting for the DB before starting the app</strong></p><p>When the app is starting up, it actually sits and waits for MySQL to be up and ready before trying to connect to it. Docker doesn&#39;t have any built-in support to wait for another container to be fully up, running, and ready before starting another container. For Node-based projects, you can use the <a href="https://github.com/dwmkerr/wait-port" target="_blank" rel="noreferrer">wait-port</a><code>{:target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;_&quot;}</code> dependency. Similar projects exist for other languages/frameworks.</p></blockquote></li><li><p>At this point, you should be able to open your app and see it running. And hey! We&#39;re down to a single command!</p></li></ol><h2 id="see-the-app-stack-in-docker-dashboard" tabindex="-1">See the app stack in Docker Dashboard <a class="header-anchor" href="#see-the-app-stack-in-docker-dashboard" aria-label="Permalink to &quot;See the app stack in Docker Dashboard&quot;">​</a></h2><p>If we look at the Docker Dashboard, we&#39;ll see that there is a group named <strong>app</strong>. This is the &quot;project name&quot; from Docker Compose and used to group the containers together. By default, the project name is simply the name of the directory that the <code>docker-compose.yml</code> was located in.</p><p><img src="`+o+'" alt="Docker Dashboard with app project"></p><p>If you twirl down the app, you will see the two containers we defined in the compose file. The names are also a little more descriptive, as they follow the pattern of <code>&lt;service-name&gt;-&lt;replica-number&gt;</code>. So, it&#39;s very easy to quickly see what container is our app and which container is the mysql database.</p><p><img src="'+l+'" alt="Docker Dashboard with app project expanded"></p><h2 id="tear-it-all-down" tabindex="-1">Tear it all down <a class="header-anchor" href="#tear-it-all-down" aria-label="Permalink to &quot;Tear it all down&quot;">​</a></h2><p>When you&#39;re ready to tear it all down, simply run <code>docker compose down</code> or hit the trash can on the Docker Dashboard for the entire app. The containers will stop and the network will be removed.</p><blockquote><p><strong>Warning</strong></p><p>Removing Volumes</p><p>By default, named volumes in your compose file are NOT removed when running <code>docker compose down</code>. If you want to remove the volumes, you will need to add the <code>--volumes</code> flag.</p><p>The Docker Dashboard does <em>not</em> remove volumes when you delete the app stack. <code>{: .warning}</code></p></blockquote><p>Once torn down, you can switch to another project, run <code>docker compose up</code> and be ready to contribute to that project! It really doesn&#39;t get much simpler than that!</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>In this section, you learned about Docker Compose and how it helps you dramatically simplify the defining and sharing of multi-service applications. You created a Compose file by translating the commands you were using into the appropriate compose format.</p><p>At this point, you&#39;re starting to wrap up the tutorial. However, there are a few best practices about image building you should cover, as there is a big issue with the Dockerfile you&#39;ve been using.</p><p><a href="./09_image_best.html">Image-building best practices</a><code>{: .button .primary-btn}</code></p>',36),c=[t];function r(i,y,C,D,d,A){return n(),a("div",null,c)}const u=s(p,[["render",r]]);export{m as __pageData,u as default};
