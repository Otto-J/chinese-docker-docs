import{_ as e,c as s,o as a,N as o}from"./chunks/framework.dc3ff5a3.js";const t="/chinese-docker-docs/assets/push-command.af62e855.png",n="/chinese-docker-docs/assets/pwd-add-new-instance.646358ce.png",y=JSON.parse('{"title":"分享应用程序","description":"Sharing your image you built for your example application so you can run it else where and other developers can use it","frontmatter":{"title":"分享应用程序","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop, docker hub, sharing","redirect_from":["/get-started/part3/"],"description":"Sharing your image you built for your example application so you can run it else where and other developers can use it"},"headers":[],"relativePath":"04_sharing_app.md"}'),l={name:"04_sharing_app.md"},p=o('<p>现在您已经构建了一个镜像，您可以共享它。要共享 Docker 镜像，您必须使用 Docker Registry 。默认 Registry 是 Docker Hub，您使用的所有镜像都来自该 Registry。</p><blockquote><p><strong>Docker ID</strong></p><p>Docker ID 允许您访问 Docker Hub，它是世界上最大的容器镜像库和社区。如果你还没有可以免费创建 <a href="https://hub.docker.com/signup" target="_blank" rel="noreferrer">Docker ID</a>。</p></blockquote><h2 id="创建一个仓库" tabindex="-1">创建一个仓库 <a class="header-anchor" href="#创建一个仓库" aria-label="Permalink to &quot;创建一个仓库&quot;">​</a></h2><p>要推送镜像，您首先需要在 Docker Hub 上创建一个存储库。</p><ol><li><p><a href="https://www.docker.com/pricing?utm_source=docker&amp;utm_medium=webreferral&amp;utm_campaign=docs_driven_upgrade" target="_blank" rel="noreferrer">注册</a> 或者登录到 <a href="https://hub.docker.com" target="_blank" rel="noreferrer">Docker Hub</a>。</p></li><li><p>选择 <strong>创建仓库</strong> 按钮。</p></li><li><p>仓库名称可以使用 <code>getting-started</code>。确保可见性 Visibility 设置为 <code>Public</code>。</p><blockquote><p><strong>私有仓库</strong></p><p>您是否知道 Docker 提供私有存储库，允许您将内容限制为特定用户或团队？查看 <a href="https://www.docker.com/pricing?utm_source=docker&amp;utm_medium=webreferral&amp;utm_campaign=docs_driven_upgrade" target="_blank" rel="noreferrer">Docker 定价</a> 上的详细信息。</p></blockquote></li><li><p>选择 <strong>创建</strong> 按钮。</p></li></ol><p>如果您查看下图，可以看到一个示例 Docker 命令。此命令将推送到此存储库。</p><p><img src="'+t+`" alt="Docker command with push example"></p><h2 id="推送镜像" tabindex="-1">推送镜像 <a class="header-anchor" href="#推送镜像" aria-label="Permalink to &quot;推送镜像&quot;">​</a></h2><ol><li><p>在命令行中，尝试运行您在 Docker Hub 上看到的推送命令。请注意，您的命令将使用您的命名空间，而不是“docker”。</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ docker push docker/getting-started</span></span>
<span class="line"><span style="color:#A6ACCD;"># 推送指的是推送到 [docker.io/docker/getting-started]</span></span>
<span class="line"><span style="color:#A6ACCD;"># 本地不存在带有标签的图像：docker/getting-started</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>为什么会失败？ push 命令正在查找名为 docker/get-start 的镜像，但没有找到。如果您运行 docker image ls，您也不会看到一个。</p><p>要解决这个问题，您需要使用 “tag” 命令把你构建的现有镜像以赋予它另一个名称。</p></li><li><p>使用 <code>docker login -u YOUR-USER-NAME</code> 登录 Docker Hub。</p></li><li><p>使用 <code>docker tag</code> 命令给 <code>getting-started</code> 镜像一个新名称。确保把 <code>YOUR-USER-NAME</code> 替换为你自己的 Docker ID。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YOUR-USER-NAME/getting-started</span></span>
<span class="line"></span></code></pre></div><p>要了解有关 <code>docker tag</code> 命令的更多信息，请参阅 <a href="./../engine/reference/commandline/tag.html">docker tag</a>。</p></li><li><p>现在再次尝试您的推送命令。如果您从 Docker Hub 复制值，您可以删除 <code>tagname</code> 部分，因为您没有在图像名称中添加 tag。如果您不指定 tag，Docker 将使用名为 <code>latest</code> 的标签。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YOUR-USER-NAME/getting-started</span></span>
<span class="line"></span></code></pre></div></li></ol><h1 id="在新实例上运行镜像" tabindex="-1">在新实例上运行镜像 <a class="header-anchor" href="#在新实例上运行镜像" aria-label="Permalink to &quot;在新实例上运行镜像&quot;">​</a></h1><p>现在您的镜像已经构建并推送到注册表中，请尝试在从未下载过此容器镜像的全新实例上运行应用程序。为此，您将使用 Play with Docker。</p><blockquote><p><strong>注意</strong></p><p>Play with Docker 使用 amd64 平台。如果您使用的是带有 Apple Silicon 的基于 ARM 的 Mac，则需要重建镜像以与 Play with Docker 兼容，并将新镜像推送到您的存储库。</p><p>要为 amd64 平台构建镜像，请使用 <code>--platform</code> 标志。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux/amd64</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YOUR-USER-NAME/getting-started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div><p>Docker buildx 还支持构建多平台镜像。要了解更多信息，请参阅<a href="./../build/building/multi-platform.html">多平台镜像</a>。</p></blockquote><ol><li><p>打开浏览器访问 <a href="https://labs.play-with-docker.com/" target="_blank" rel="noreferrer">Play with Docker</a>。</p></li><li><p>选择 <strong>登录</strong> ，在下拉框里选择 <strong>docker</strong> 。</p></li><li><p>连接您的 Docker Hub 帐户。</p></li><li><p>登录后，选择左侧栏上的 <strong>添加新实例 ADD NEW INSTANCE</strong>选项。如果您没有看到它，请将浏览器变宽一点。几秒钟后，浏览器中将打开一个终端窗口。 <img src="`+n+`" alt="Play with Docker add new instance"></p></li><li><p>在终端中，启动新推送的应用程序。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YOUR-USER-NAME/getting-started</span></span>
<span class="line"></span></code></pre></div><p>您应该会看到镜像被拉下来并最终启动。</p></li><li><p>出现 3000 徽章时选择它，您应该会看到包含您修改的应用程序。如果 3000 徽章没有显示，您可以在 <strong>打开端口 Open Port</strong> 按钮上选择并输入 3000。</p></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本节中，您学习了如何通过将镜像推送到注册表来共享镜像。然后，您转到一个全新的实例，并能够运行新推送的镜像。这在 CI 管道中很常见，管道将创建镜像并将其推送到注册表，然后正式生产环境可以使用最新版本的镜像。</p><p>现在您可以回到上一节末尾注意到的内容。提醒一下，您注意到当您重新启动应用程序时，您丢失了所有待办事项列表项。这显然不是一个很好的用户体验，所以接下来您将学习如何在重新启动时持久化数据。</p><p><a href="./05_persisting_data.html">持久化数据库</a>。</p>`,17),r=[p];function c(i,d,g,u,C,h){return a(),s("div",null,r)}const D=e(l,[["render",c]]);export{y as __pageData,D as default};
