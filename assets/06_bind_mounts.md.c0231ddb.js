import{_ as s,c as o,o as n,N as e}from"./chunks/framework.dc3ff5a3.js";const a="/chinese-docker-docs/assets/bind-mount-newfile.b96d42a1.png",t="/chinese-docker-docs/assets/updated-add-button.6bf69f66.png",m=JSON.parse('{"title":"Use bind mounts","description":"Using bind mounts in our application","frontmatter":{"title":"Use bind mounts","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop\\n","description":"Using bind mounts in our application"},"headers":[],"relativePath":"06_bind_mounts.md"}'),l={name:"06_bind_mounts.md"},p=e(`<p>In the previous chapter, we talked about and used a volume mount to persist the data in our database. A volume mount is a great choice when you need somewhere persistent to store your application data.</p><p>A bind mount is another type of mount, which lets you share a directory from the host&#39;s filesystem into the container. When working on an application, you can use a bind mount to mount source code into the container. The container sees the changes you make to the code immediately, as soon as you save a file. This means that you can run processes in the container that watch for filesystem changes and respond to them.</p><p>In this chapter, we&#39;ll see how we can use bind mounts and a tool called <a href="https://npmjs.com/package/nodemon" target="_blank" rel="noreferrer">nodemon</a>{:target=&quot;<em>blank&quot; rel=&quot;noopener&quot; class=&quot;</em>&quot;} to watch for file changes, and then restart the application automatically. There are equivalent tools in most other languages and frameworks.</p><h2 id="quick-volume-type-comparisons" tabindex="-1">Quick volume type comparisons <a class="header-anchor" href="#quick-volume-type-comparisons" aria-label="Permalink to &quot;Quick volume type comparisons&quot;">​</a></h2><p>The following table outlines the main differences between volume mounts and bind mounts.</p><table><thead><tr><th></th><th>Named volumes</th><th>Bind mounts</th></tr></thead><tbody><tr><td>Host location</td><td>Docker chooses</td><td>You decide</td></tr><tr><td>Mount example (using <code>--mount</code>)</td><td><code>type=volume,src=my-volume,target=/usr/local/data</code></td><td><code>type=bind,src=/path/to/data,target=/usr/local/data</code></td></tr><tr><td>Populates new volume with container contents</td><td>Yes</td><td>No</td></tr><tr><td>Supports Volume Drivers</td><td>Yes</td><td>No</td></tr></tbody></table><h2 id="trying-out-bind-mounts" tabindex="-1">Trying out bind mounts <a class="header-anchor" href="#trying-out-bind-mounts" aria-label="Permalink to &quot;Trying out bind mounts&quot;">​</a></h2><p>Before looking at how we can use bind mounts for developing our application, let&#39;s run a quick experiment to get a practical understanding of how bind mounts work.</p><p>If you&#39;re following these steps on Windows, make sure to use PowerShell and not command prompt (<code>cmd</code>).</p><ol><li><p>Open a terminal and make sure your current working directory is in the <code>app</code> directory of the getting started repository.</p></li><li><p>Run the following command to start <code>bash</code> in an <code>ubuntu</code> container with a bind mount.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=bind,src=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#C3E88D;">,target=/src</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bash</span></span>
<span class="line"></span></code></pre></div><p>The <code>--mount</code> option tells Docker to create a bind mount, where <code>src</code> is the current working directory on your host machine (<code>getting-started/app</code>), and <code>target</code> is where that directory should appear inside the container (<code>/src</code>).</p></li><li><p>After running the command, Docker starts an interactive <code>bash</code> session in the root directory of the container&#39;s filesystem.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/</span><span style="color:#A6ACCD;"># pwd</span></span>
<span class="line"><span style="color:#FFCB6B;">/</span></span>
<span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/</span><span style="color:#A6ACCD;"># ls</span></span>
<span class="line"><span style="color:#FFCB6B;">bin</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">dev</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">home</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">media</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">opt</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">root</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">sbin</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">srv</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">tmp</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">var</span></span>
<span class="line"><span style="color:#FFCB6B;">boot</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">etc</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">lib</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mnt</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">proc</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">sys</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">usr</span></span>
<span class="line"></span></code></pre></div></li><li><p>Now, change directory in the <code>src</code> directory.</p><p>This is the directory that you mounted when starting the container. Listing the contents of this directory displays the same files as in the <code>getting-started/app</code> directory on your host machine.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/</span><span style="color:#A6ACCD;"># cd src</span></span>
<span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/src</span><span style="color:#A6ACCD;"># ls</span></span>
<span class="line"><span style="color:#FFCB6B;">Dockerfile</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">spec</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">yarn.lock</span></span>
<span class="line"></span></code></pre></div></li><li><p>Create a new file named <code>myfile.txt</code>.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/src</span><span style="color:#A6ACCD;"># touch myfile.txt</span></span>
<span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/src</span><span style="color:#A6ACCD;"># ls</span></span>
<span class="line"><span style="color:#FFCB6B;">Dockerfile</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">myfile.txt</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">spec</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">yarn.lock</span></span>
<span class="line"></span></code></pre></div></li><li><p>Now if you open this directory on the host, you&#39;ll see the <code>myfile.txt</code> file has been created in the directory.</p><p><img src="`+a+`" alt="File viewer on the host machine that sees the file created from the container"></p></li><li><p>From the host, delete the <code>myfile.txt</code> file.</p></li><li><p>In the container, list the contents of the <code>app</code> directory once more. You&#39;ll see that the file is now gone.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@ac1237fad8db:/src</span><span style="color:#A6ACCD;"># ls</span></span>
<span class="line"><span style="color:#FFCB6B;">Dockerfile</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">package.json</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">spec</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">yarn.lock</span></span>
<span class="line"></span></code></pre></div></li><li><p>Stop the interactive container session with <code>Ctrl</code> + <code>D</code>.</p></li></ol><p>And that&#39;s all for a brief introduction to bind mounts. This procedure demonstrated how files are shared between the host and the container, and how changes are immediately reflected on both sides. Now let&#39;s see how we can use bind mounts to develop software.</p><h2 id="run-your-app-in-a-development-container" tabindex="-1">Run your app in a development container <a class="header-anchor" href="#run-your-app-in-a-development-container" aria-label="Permalink to &quot;Run your app in a development container&quot;">​</a></h2><p>The following steps describe how to run a development container with a bind mount that does the following:</p><ul><li>Mount our source code into the container</li><li>Install all dependencies</li><li>Start <code>nodemon</code> to watch for filesystem changes</li></ul><p>So, let&#39;s do it!</p><ol><li><p>Make sure you don&#39;t have any <code>getting-started</code> containers currently running.</p></li><li><p>Run the following command from the <code>getting-started/app</code> directory.</p><p>If you are using an Mac or Linux device, then use the following command.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=bind,src=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#C3E88D;">,target=/app</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">node:</span><span style="color:#F78C6C;">18</span><span style="color:#C3E88D;">-alpine</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn install &amp;&amp; yarn run dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>If you are using Windows, then use the following command in PowerShell.</p><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ docker run </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dp </span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">w </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">mount type</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">bind</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">$(</span><span style="color:#A6ACCD;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">=/</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    node:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">alpine </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    sh </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn install &amp;&amp; yarn run dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li><code>-dp 3000:3000</code> - same as before. Run in detached (background) mode and create a port mapping</li><li><code>-w /app</code> - sets the &quot;working directory&quot; or the current directory that the command will run from</li><li><code>--mount type=bind,src=&quot;$(pwd)&quot;,target=/app</code> - bind mount the current directory from the host into the <code>/app</code> directory in the container</li><li><code>node:18-alpine</code> - the image to use. Note that this is the base image for our app from the Dockerfile</li><li><code>sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</code> - the command. We&#39;re starting a shell using <code>sh</code> (alpine doesn&#39;t have <code>bash</code>) and running <code>yarn install</code> to install packages and then running <code>yarn run dev</code> to start the development server. If we look in the <code>package.json</code>, we&#39;ll see that the <code>dev</code> script starts <code>nodemon</code>.</li></ul></li><li><p>You can watch the logs using <code>docker logs</code>. You&#39;ll know you&#39;re ready to go when you see this:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">container-i</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">nodemon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 2.0.20</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> to restart at any time, enter </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">rs</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> watching dir</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> starting </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> src/index.js</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#FFCB6B;">Using</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sqlite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">database</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/todos/todo.db</span></span>
<span class="line"><span style="color:#FFCB6B;">Listening</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span></code></pre></div><p>When you&#39;re done watching the logs, exit out by hitting <code>Ctrl</code>+<code>C</code>.</p></li><li><p>Now, make a change to the app. In the <code>src/static/js/app.js</code> file, on line 109, change the &quot;Add Item&quot; button to simply say &quot;Add&quot;:</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> {submitting ? &#39;Adding...&#39; : &#39;Add Item&#39;}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> {submitting ? &#39;Adding...&#39; : &#39;Add&#39;}</span></span>
<span class="line"></span></code></pre></div><p>Save the file.</p></li><li><p>Refresh the page in your web browser, and you should see the change reflected almost immediately. It might take a few seconds for the Node server to restart. If you get an error, try refreshing after a few seconds.</p><p><img src="`+t+`" alt="Screenshot of updated label for Add button">{: style=&quot;width:75%;&quot; .text-center}</p></li><li><p>Feel free to make any other changes you&#39;d like to make. Each time you make a change and save a file, the <code>nodemon</code> process restarts the app inside the container automatically. When you&#39;re done, stop the container and build your new image using:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div></li></ol><p>Using bind mounts is common for local development setups. The advantage is that the development machine doesn&#39;t need to have all of the build tools and environments installed. With a single <code>docker run</code> command, dependencies and tools are pulled and ready to go. We&#39;ll talk about Docker Compose in a future step, as this will help simplify our commands (we&#39;re already getting a lot of flags).</p><p>In addition to volume mounts and bind mounts, Docker also supports other mount types and storage drivers for handling more complex and specialized use cases. To learn more about the advanced storage concepts, see <a href="https://docs.docker.com/storage/" target="_blank" rel="noreferrer">Manage data in Docker</a>.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>At this point, you can persist your database and respond rapidly to the needs and demands of your investors and founders. Hooray! But, guess what? You received great news! Your project has been selected for future development!</p><p>In order to prepare for production, you need to migrate your database from working in SQLite to something that can scale a little better. For simplicity, you&#39;ll keep with a relational database and switch your application to use MySQL. But, how should you run MySQL? How do you allow the containers to talk to each other? You&#39;ll learn about that next!</p><p><a href="./07_multi_container.html">Multi container apps</a><code>{: .button .primary-btn}</code></p>`,22),c=[p];function r(i,d,y,C,u,h){return n(),o("div",null,c)}const A=s(l,[["render",r]]);export{m as __pageData,A as default};
