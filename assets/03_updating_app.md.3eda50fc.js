import{_ as s,c as a,o,N as e}from"./chunks/framework.dc3ff5a3.js";const l="/chinese-docker-docs/assets/todo-list-updated-empty-text.1cf17d9f.png",A=JSON.parse('{"title":"更新应用程序","description":"Making changes to our example learning application","frontmatter":{"title":"更新应用程序","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop","description":"Making changes to our example learning application"},"headers":[],"relativePath":"03_updating_app.md"}'),n={name:"03_updating_app.md"},p=e(`<p>在 <a href="./02_our_app.html">part 2</a> 中，您容器化了一个待办事项应用程序。在这一部分中，您将更新应用程序和容器映像。您还将学习如何停止和删除容器。</p><h2 id="更新源代码" tabindex="-1">更新源代码 <a class="header-anchor" href="#更新源代码" aria-label="Permalink to &quot;更新源代码&quot;">​</a></h2><p>在以下步骤中，您将在没有任何待办事项列表项时将“empty text”更改为“You have no todo items yet! Add one above!”</p><ol><li><p>在 <code>src/static/js/app.js</code> 文件中， 更新第 56 行以使用新的空文本。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line diff remove"><span style="color:#A6ACCD;">&lt;p className=&quot;text-center&quot;&gt;No items yet! Add one above!&lt;/p&gt;</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">&lt;p className=&quot;text-center&quot;&gt;You have no todo items yet! Add one above!&lt;/p&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>使用您在 <a href="./02_our_app/#build-the-apps-container-image">part 2</a> 中使用的相同 <code>docker build</code> 命令构建映像的更新版本。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div></li><li><p>使用更新的代码启动一个新容器。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span></span>
<span class="line"></span></code></pre></div></li></ol><p>您可能会看到这样的错误（ID 会不同）：</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Error</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">response</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daemon:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">driver</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">programming</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">external</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">connectivity</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">endpoint</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">laughing_burnell</span></span>
<span class="line"><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">bb242b2ca4d67eba76e79474fb36bb5125708ebdabd7f45c8eaf16caaabde9dd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">: Bind </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> 0.0.0.0:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> failed: port is already allocated.</span></span>
<span class="line"></span></code></pre></div><p>发生错误是因为您无法在旧容器仍在运行时启动新容器。原因是旧容器已经在使用主机的端口 3000，并且机器上只有一个进程（包括容器）可以监听特定端口。要解决此问题，您需要删除旧容器。</p><h2 id="删除旧容器" tabindex="-1">删除旧容器 <a class="header-anchor" href="#删除旧容器" aria-label="Permalink to &quot;删除旧容器&quot;">​</a></h2><p>要删除容器，您首先需要停止它。一旦它停止，您就可以将其删除。您可以使用 CLI 或 Docker Desktop 的图形界面删除旧容器。选择您最熟悉的选项。</p><ul><li><a href="#CLI">CLI</a></li><li><a href="#gui">Docker Desktop</a></li></ul><h3 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h3><h3 id="通过-cli-移除容器" tabindex="-1">通过 CLI 移除容器 <a class="header-anchor" href="#通过-cli-移除容器" aria-label="Permalink to &quot;通过 CLI 移除容器&quot;">​</a></h3><ol><li><p>使用<code>docker ps</code>命令获取容器的 ID。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span></span>
<span class="line"></span></code></pre></div></li><li><p>使用<code>docker stop</code>命令停止容器。将<code>&lt;the-corer-id&gt;</code>替换为<code>docker ps</code>中的 ID。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">the-container-i</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li><li><p>容器停止后，您可以使用<code>docker rm</code>命令将其删除。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">the-container-i</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div></li></ol><blockquote><p><strong>注意</strong></p><p>您可以通过将 <code>force</code> 标志添加到 <code>docker rm</code> 命令来在单个命令中停止和删除容器。例如：<code>docker rm -f &lt;the-corer-id&gt;</code></p></blockquote><h3 id="gui" tabindex="-1">gui <a class="header-anchor" href="#gui" aria-label="Permalink to &quot;gui&quot;">​</a></h3><h3 id="使用-docker-desktop-删除容器" tabindex="-1">使用 Docker Desktop 删除容器 <a class="header-anchor" href="#使用-docker-desktop-删除容器" aria-label="Permalink to &quot;使用 Docker Desktop 删除容器&quot;">​</a></h3><ol><li>打开 Docker Desktop 到<strong>Containers</strong>视图。</li><li>为要删除的旧容器选择 <strong>Actions</strong> 列下的垃圾桶图标。</li><li>在确认对话框中，选择 <strong>Delete forever</strong>。</li></ol><h3 id="启动更新的应用容器" tabindex="-1">启动更新的应用容器 <a class="header-anchor" href="#启动更新的应用容器" aria-label="Permalink to &quot;启动更新的应用容器&quot;">​</a></h3><ol><li>现在，使用 <code>docker run</code>命令启动更新后的应用程序。</li></ol><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>刷新浏览器 <a href="http://localhost:3000" target="_blank" rel="noreferrer"><a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a></a> 你会看到更新的文本。</li></ol><p><img src="`+l+'" alt="Updated application with updated empty text"></p><h2 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h2><p>虽然您能够构建更新，但您可能已经注意到两件事：</p><ul><li>您的待办事项列表中的所有现有项目都消失了！这不是一个很好的应用程序！您很快就会解决这个问题。</li><li>如此小的更改涉及很多步骤。在接下来的部分中，您将学习如何查看代码更新，而无需在每次进行更改时重建和启动新容器。</li></ul><p>在讨论持久性之前，您将了解如何与他人共享这些镜像。</p><p><a href="./04_sharing_app.html">分享应用程序</a></p>',27),t=[p];function c(r,i,d,C,y,D){return o(),a("div",null,t)}const u=s(n,[["render",c]]);export{A as __pageData,u as default};
