import{_ as s,c as a,o as e,N as o}from"./chunks/framework.dc3ff5a3.js";const n="/chinese-docker-docs/assets/ide-screenshot.c220ae0a.png",l="/chinese-docker-docs/assets/todo-list-empty.ba9a2378.png",p="/chinese-docker-docs/assets/dashboard-two-containers.cc833d45.png",A=JSON.parse('{"title":"容器化一个应用","description":"Containerize and run a simple application to learn Docker","frontmatter":{"title":"容器化一个应用","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop","redirect_from":["/get-started/part2/"],"description":"Containerize and run a simple application to learn Docker"},"headers":[],"relativePath":"02_our_app.md"}'),t={name:"02_our_app.md"},c=o('<p>在本指南的其余部分，您将使用在 Node.js 中运行的简单待办事项列表管理器。如果您不熟悉 Node.js，请不要担心。本指南不需要 JavaScript 经验。</p><p>要完成本指南，您需要以下内容：</p><ul><li>本地运行的 Docker。按照说明 <a href="./../get-docker.html">下载并安装 Docker</a>。</li><li>准备 <a href="https://git-scm.com/downloads" target="_blank" rel="noreferrer">Git 客户端</a>.</li><li>准备 IDE 或者文本编辑器，推荐使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a>`。</li><li><a href="./../get-started/overview.md/#docker-objects">对容器和镜像的概念理解</a>。</li></ul><h2 id="获取应用源码" tabindex="-1">获取应用源码 <a class="header-anchor" href="#获取应用源码" aria-label="Permalink to &quot;获取应用源码&quot;">​</a></h2><p>在运行应用程序之前，您需要将应用程序源代码放到您的机器上。</p><ol><li><p>使用以下命令克隆 <a href="https://github.com/docker/getting-started/tree/master" target="_blank" rel="noreferrer">入门存储库</a>：</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/docker/getting-started.git</span></span>\n<span class="line"></span></code></pre></div></li></ol><p>2.查看克隆存储库的内容。在 <code>get-start/app</code> 目录中，您应该会看到 <code>package.json</code> 和两个子目录（<code>src</code> 和 <code>spec</code>）。</p><p><img src="'+n+`" alt="Screenshot of Visual Studio Code opened with the app loaded"></p><h2 id="构建应用的容器镜像" tabindex="-1">构建应用的容器镜像 <a class="header-anchor" href="#构建应用的容器镜像" aria-label="Permalink to &quot;构建应用的容器镜像&quot;">​</a></h2><p>为了构建 <a href="./../get-started/overview.md/#docker-objects">容器映像</a>，您需要使用 <code>Dockerfile</code>。Dockerfile 只是一个没有文件扩展名的基于文本的文件。Dockerfile 包含 Docker 用来创建容器镜像的指令脚本。</p><ol><li>在与 <code>package.json</code> 文件相同的 <code>app</code> 目录中，创建一个名为 <code>Dockerfile</code> 的文件。您可以使用以下命令根据您的操作系统创建 Dockerfile。</li></ol><ul><li><a href="#mac-linux">Mac / Linux</a></li><li><a href="#Windows">Windows</a></li></ul><h3 id="mac-linux" tabindex="-1">mac-linux <a class="header-anchor" href="#mac-linux" aria-label="Permalink to &quot;mac-linux&quot;">​</a></h3><p>在终端中，运行下面列出的以下命令。</p><p>将目录更改为 <code>app</code> 目录。将 <code>/path/to/app</code> 替换为 <code>getting-started/app</code> 目录的路径。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/app</span></span>
<span class="line"></span></code></pre></div><p>创建一个名为 <code>Dockerfile</code> 的空文件。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile</span></span>
<span class="line"></span></code></pre></div><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p>在 Windows 命令提示符中，运行下面列出的以下命令。</p><p>将目录更改为 <code>app</code> 目录。将 <code>\\path\\to\\app</code> 替换为 <code>getting-started\\app</code> 目录的路径。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> \\p</span><span style="color:#C3E88D;">ath</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">o</span><span style="color:#A6ACCD;">\\a</span><span style="color:#C3E88D;">pp</span></span>
<span class="line"></span></code></pre></div><p>创建一个名为 <code>Dockerfile</code> 的空文件。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nul</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dockerfile</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><p>使用文本编辑器或代码编辑器，将以下内容添加到 Dockerfile：</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"># syntax=docker/dockerfile:1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">FROM node:18-alpine</span></span>
<span class="line"><span style="color:#A6ACCD;">WORKDIR /app</span></span>
<span class="line"><span style="color:#A6ACCD;">COPY . .</span></span>
<span class="line"><span style="color:#A6ACCD;">RUN yarn install --production</span></span>
<span class="line"><span style="color:#A6ACCD;">CMD [&quot;node&quot;, &quot;src/index.js&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">EXPOSE 3000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p><strong>注意</strong></p><p>在 Dockerfile 示例中选择一条指令以了解有关该指令的更多信息。</p></blockquote></li><li><p>使用以下命令构建容器映像：</p></li></ol><p>在终端中，将目录更改为 <code>getting-started/app</code> 目录。将 <code>/path/to/app</code> 替换为 <code>getting-started/app</code> 目录的路径。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/app</span></span>
<span class="line"></span></code></pre></div><p>构建容器镜像。</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div><p><code>docker build</code>命令使用 Dockerfile 构建一个新的容器映像。您可能已经注意到 Docker 下载了很多“图层”。这是因为您指示构建器要基于 <code>node:18-alpine</code> 。但是，由于您的机器上没有它，Docker 需要下载映像。</p><p>Docker 下载映像后，Dockerfile 中的指令会复制到您的应用程序中，并使用 <code>yarn</code> 安装应用程序的依赖项。<code>CMD</code> 指令指定从此映像启动容器时要运行的默认命令。</p><p>最后，<code>-t</code> 标志标记您的镜像。将其简单地视为最终镜像的人类可读名称。由于您将镜像命名为 <code>getting-started</code>，因此您可以在运行容器时引用该镜像。</p><p>在 <code>docker build</code> 命令的末尾使用 <code>.</code> 告诉 Docker 它应该在当前目录中查找 <code>Dockerfile</code>。</p><h2 id="启动应用容器" tabindex="-1">启动应用容器 <a class="header-anchor" href="#启动应用容器" aria-label="Permalink to &quot;启动应用容器&quot;">​</a></h2><p>现在您有了一个映像，您可以在 <a href="./../get-started/overview.md/#docker-objects">容器</a> 中运行应用程序。为此，您将使用 <code>docker run</code> 命令。</p><ol><li><p>使用 <code>docker run</code> 命令启动容器并指定刚刚创建的映像的名称：</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getting-started</span></span>
<span class="line"></span></code></pre></div><p>您可以使用 <code>-d</code> 标志以分离模式（在后台）运行新容器。您还可以使用 <code>-p</code> 标志创建主机端口 3000 到容器端口 3000 之间的映射。如果没有端口映射，您将无法访问应用程序。</p></li><li><p>几秒后，打开浏览器访问 <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>。你可以看到应用启动了。</p><p><img src="`+l+'" alt="Empty todo list"></p></li><li><p>继续添加一两个项目，看看它是否按您的预期工作。您可以将项目标记为完整并删除项目。您的前端正在成功地将项目存储在后端。</p></li></ol><p>此时，您应该有一个正在运行的待办事项列表管理器，其中包含一些项目，全部由您构建。</p><p>如果您快速查看 Docker 仪表板，您应该会看到至少一个正在 <code>getting-started</code> 映像和端口 3000 运行的容器。</p><p><img src="'+p+'" alt="Docker Dashboard with tutorial and app containers running"></p><h1 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h1><p>在这个简短的部分中，您了解了有关创建 Dockerfile 以构建容器映像的基础知识。构建映像后，您启动了一个容器并看到了正在运行的应用程序。</p><p>接下来，您将对您的应用程序进行修改，并学习如何使用新映像更新正在运行的应用程序。在此过程中，您将学习一些其他有用的命令。</p><p><a href="./03_updating_app.html">更新应用程序</a></p>',43),r=[c];function i(d,C,h,y,D,u){return e(),a("div",null,r)}const k=s(t,[["render",i]]);export{A as __pageData,k as default};
