import{_ as s,c as n,o as a,N as o}from"./chunks/framework.dc3ff5a3.js";const e="/chinese-docker-docs/assets/multi-app-architecture.0b7443a6.png",h=JSON.parse('{"title":"Multi container apps","description":"Using more than one container in our application","frontmatter":{"title":"Multi container apps","keywords":"get started, setup, orientation, quickstart, intro, concepts, containers, docker desktop","description":"Using more than one container in our application"},"headers":[],"relativePath":"07_multi_container.md"}'),l={name:"07_multi_container.md"},t=o('<p>Up to this point, we have been working with single container apps. But, we now want to add MySQL to the application stack. The following question often arises - &quot;Where will MySQL run? Install it in the same container or run it separately?&quot; In general, <strong>each container should do one thing and do it well.</strong> A few reasons:</p><ul><li>There&#39;s a good chance you&#39;d have to scale APIs and front-ends differently than databases</li><li>Separate containers let you version and update versions in isolation</li><li>While you may use a container for the database locally, you may want to use a managed service for the database in production. You don&#39;t want to ship your database engine with your app then.</li><li>Running multiple processes will require a process manager (the container only starts one process), which adds complexity to container startup/shutdown</li></ul><p>And there are more reasons. So, we will update our application to work like this:</p><p><img src="'+e+`" alt="Todo App connected to MySQL container"><code>{: .text-center }</code></p><h2 id="container-networking" tabindex="-1">Container networking <a class="header-anchor" href="#container-networking" aria-label="Permalink to &quot;Container networking&quot;">​</a></h2><p>Remember that containers, by default, run in isolation and don&#39;t know anything about other processes or containers on the same machine. So, how do we allow one container to talk to another? The answer is <strong>networking</strong>. Now, you don&#39;t have to be a network engineer (hooray!). Simply remember this rule...</p><blockquote><p><strong>Note</strong></p><p>If two containers are on the same network, they can talk to each other. If they aren&#39;t, they can&#39;t.</p></blockquote><h2 id="start-mysql" tabindex="-1">Start MySQL <a class="header-anchor" href="#start-mysql" aria-label="Permalink to &quot;Start MySQL&quot;">​</a></h2><p>There are two ways to put a container on a network:</p><ol><li>Assign it at start or</li><li>connect an existing container. For now, we will create the network first and attach the MySQL container at startup.</li></ol><ol><li><p>Create the network.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span></span>
<span class="line"></span></code></pre></div></li><li><p>Start a MySQL container and attach it to the network. We&#39;re also going to define a few environment variables that the database will use to initialize the database (see the &quot;Environment Variables&quot; section in the <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noreferrer">MySQL Docker Hub listing</a>).</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--network-alias</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-mysql-data:/var/lib/mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_ROOT_PASSWORD=secret</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_DATABASE=todos</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">mysql:</span><span style="color:#F78C6C;">8.0</span></span>
<span class="line"></span></code></pre></div><p>If you are using Windows then use this command in PowerShell.</p><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ docker run </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">network todo</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">alias mysql </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v todo</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">mysql</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">data:</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">var</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">mysql </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_ROOT_PASSWORD</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">secret </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_DATABASE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">todos </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    mysql:</span><span style="color:#F78C6C;">8.0</span></span>
<span class="line"></span></code></pre></div><p>You&#39;ll also see we specified the <code>--network-alias</code> flag. We&#39;ll come back to that in just a moment.</p><blockquote><p><strong>Tip</strong></p><p>You&#39;ll notice we&#39;re using a volume named <code>todo-mysql-data</code> here and mounting it at <code>/var/lib/mysql</code>, which is where MySQL stores its data. However, we never ran a <code>docker volume create</code> command. Docker recognizes we want to use a named volume and creates one automatically for us.</p></blockquote></li><li><p>To confirm we have the database up and running, connect to the database and verify it connects.</p><pre><code>\`\`\`console
$ docker exec -it &lt;mysql-container-id&gt; mysql -u root -p
\`\`\`

When the password prompt comes up, type in **secret**. In the MySQL shell, list the databases and verify
you see the \`todos\` database.

\`\`\`console
mysql&gt; SHOW DATABASES;
\`\`\`

You should see output that looks like this:

\`\`\`plaintext
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| todos              |
+--------------------+
5 rows in set (0.00 sec)
\`\`\`
</code></pre><p>Exit the MySQL shell to return to the shell on our machine.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mysql&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exit</span></span>
<span class="line"></span></code></pre></div><p>Hooray! We have our <code>todos</code> database and it&#39;s ready for us to use!</p></li></ol><h2 id="connect-to-mysql" tabindex="-1">Connect to MySQL <a class="header-anchor" href="#connect-to-mysql" aria-label="Permalink to &quot;Connect to MySQL&quot;">​</a></h2><p>Now that we know MySQL is up and running, let&#39;s use it! But, the question is... how? If we run another container on the same network, how do we find the container (remember each container has its own IP address)?</p><p>To figure it out, we&#39;re going to make use of the <a href="https://github.com/nicolaka/netshoot" target="_blank" rel="noreferrer">nicolaka/netshoot</a> container, which ships with a <em>lot</em> of tools that are useful for troubleshooting or debugging networking issues.</p><ol><li><p>Start a new container using the nicolaka/netshoot image. Make sure to connect it to the same network.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nicolaka/netshoot</span></span>
<span class="line"></span></code></pre></div></li><li><p>Inside the container, we&#39;re going to use the <code>dig</code> command, which is a useful DNS tool. We&#39;re going to look up the IP address for the hostname <code>mysql</code>.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dig</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span></span>
<span class="line"></span></code></pre></div><p>And you&#39;ll get an output like this...</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">; &lt;&lt;&gt;&gt; DiG 9.18.8 &lt;&lt;&gt;&gt; mysql</span></span>
<span class="line"><span style="color:#A6ACCD;">;; global options: +cmd</span></span>
<span class="line"><span style="color:#A6ACCD;">;; Got answer:</span></span>
<span class="line"><span style="color:#A6ACCD;">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 32162</span></span>
<span class="line"><span style="color:#A6ACCD;">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">;; QUESTION SECTION:</span></span>
<span class="line"><span style="color:#A6ACCD;">;mysql.				IN	A</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">;; ANSWER SECTION:</span></span>
<span class="line"><span style="color:#A6ACCD;">mysql.			600	IN	A	172.23.0.2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">;; Query time: 0 msec</span></span>
<span class="line"><span style="color:#A6ACCD;">;; SERVER: 127.0.0.11#53(127.0.0.11)</span></span>
<span class="line"><span style="color:#A6ACCD;">;; WHEN: Tue Oct 01 23:47:24 UTC 2019</span></span>
<span class="line"><span style="color:#A6ACCD;">;; MSG SIZE  rcvd: 44</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In the &quot;ANSWER SECTION&quot;, you will see an <code>A</code> record for <code>mysql</code> that resolves to <code>172.23.0.2</code> (your IP address will most likely have a different value). While <code>mysql</code> isn&#39;t normally a valid hostname, Docker was able to resolve it to the IP address of the container that had that network alias (remember the <code>--network-alias</code> flag we used earlier?).</p><p>What this means is... our app only simply needs to connect to a host named <code>mysql</code> and it&#39;ll talk to the database! It doesn&#39;t get much simpler than that!</p></li></ol><h2 id="run-your-app-with-mysql" tabindex="-1">Run your app with MySQL <a class="header-anchor" href="#run-your-app-with-mysql" aria-label="Permalink to &quot;Run your app with MySQL&quot;">​</a></h2><p>The todo app supports the setting of a few environment variables to specify MySQL connection settings. They are:</p><ul><li><code>MYSQL_HOST</code> - the hostname for the running MySQL server</li><li><code>MYSQL_USER</code> - the username to use for the connection</li><li><code>MYSQL_PASSWORD</code> - the password to use for the connection</li><li><code>MYSQL_DB</code> - the database to use once connected</li></ul><blockquote><p><strong>Setting Connection Settings via Env Vars</strong></p><p>While using env vars to set connection settings is generally ok for development, it is <strong>HIGHLY DISCOURAGED</strong> when running applications in production. Diogo Monica, a former lead of security at Docker, <a href="https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/" target="_blank" rel="noreferrer">wrote a fantastic blog post</a><code>{:target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;_&quot;}</code> explaining why.</p><p>A more secure mechanism is to use the secret support provided by your container orchestration framework. In most cases, these secrets are mounted as files in the running container. You&#39;ll see many apps (including the MySQL image and the todo app) also support env vars with a <code>_FILE</code> suffix to point to a file containing the variable.</p><p>As an example, setting the <code>MYSQL_PASSWORD_FILE</code> var will cause the app to use the contents of the referenced file as the connection password. Docker doesn&#39;t do anything to support these env vars. Your app will need to know to look for the variable and get the file contents.</p></blockquote><p>With all of that explained, let&#39;s start our dev-ready container!</p><ol><li><p><strong>Note</strong>: for MySQL versions 8.0 and higher, make sure to include the following commands in <code>mysql</code>.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mysql&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ALTER</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">USER</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">IDENTIFIED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WITH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql_native_password</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">BY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">secret</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">mysql&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flush</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">privileges</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>We&#39;ll specify each of the environment variables above, as well as connect the container to our app network.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-dp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:/app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo-app</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_HOST=mysql</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_USER=root</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_PASSWORD=secret</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MYSQL_DB=todos</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">node:</span><span style="color:#F78C6C;">18</span><span style="color:#C3E88D;">-alpine</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn install &amp;&amp; yarn run dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>If you are using Windows then use this command in PowerShell.</p><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ docker run </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dp </span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">w </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">$(</span><span style="color:#A6ACCD;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:/app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">network todo</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_HOST</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">mysql </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_USER</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">root </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_PASSWORD</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">secret </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e MYSQL_DB</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">todos </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  node:</span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">alpine </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  sh </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yarn install &amp;&amp; yarn run dev</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p>If we look at the logs for the container (<code>docker logs -f &lt;container-id&gt;</code>), we should see a message indicating it&#39;s using the mysql database.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nodemon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> 2.0.20</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> to restart at any time, enter </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">rs</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> watching dir</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">.</span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">nodemon</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> starting </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> src/index.js</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#FFCB6B;">Connected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">db</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">host</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span></span>
<span class="line"><span style="color:#FFCB6B;">Listening</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">on</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span></span>
<span class="line"></span></code></pre></div></li><li><p>Open the app in your browser and add a few items to your todo list.</p></li><li><p>Connect to the mysql database and prove that the items are being written to the database. Remember, the password is <strong>secret</strong>.</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">mysql-container-i</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mysql</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todos</span></span>
<span class="line"></span></code></pre></div><p>And in the mysql shell, run the following:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mysql&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">todo_items</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">+--------------------------------------+--------------------+-----------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#A6ACCD;">                                   </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;">               </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">completed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#FFCB6B;">+--------------------------------------+--------------------+-----------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">c906ff08-60e6-44e6-8f49-ed56a0853e85</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Do</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">amazing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">things!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">2912a79e-8486-4bc3-a4c5-460793a575ab</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Be</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">awesome!</span><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#FFCB6B;">+--------------------------------------+--------------------+-----------+</span></span>
<span class="line"></span></code></pre></div><p>Obviously, your table will look different because it has your items. But, you should see them stored there!</p></li></ol><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>At this point, you have an application that now stores its data in an external database running in a separate container. You learned a little bit about container networking and service discovery using DNS.</p><p>But, there&#39;s a good chance you are starting to feel a little overwhelmed with everything you need to do to start up this application. You have to create a network, start containers, specify all of the environment variables, expose ports, and more! That&#39;s a lot to remember and it&#39;s certainly making things harder to pass along to someone else.</p><p>In the next section, you&#39;ll learn about Docker Compose. With Docker Compose, you can share your application stacks in a much easier way and let others spin them up with a single (and simple) command!</p><p><a href="./08_using_compose.html">Use Docker Compose</a><code>{: .button .primary-btn}</code></p>`,26),p=[t];function r(c,i,y,C,D,A){return a(),n("div",null,p)}const u=s(l,[["render",r]]);export{h as __pageData,u as default};
